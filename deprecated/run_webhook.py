import asyncio
import logging
import os
import socket

from aiogram import Bot, Dispatcher
from aiogram import F
from aiogram.types import Message
from aiogram.types import Update
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from dotenv import load_dotenv
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

from handlers.newMemberMuteHandler import router as member_router
from handlers.start import start_router

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = "https://dishes-sections-cd-washer.trycloudflare.com"  # –∑–∞–º–µ–Ω–∏—à—å –Ω–∞ —Å–≤–æ–π cloudflared URL
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
dp.include_router(start_router)
dp.include_router(member_router)


@dp.message()
async def catch_all_messages(message: Message):
    print(f"[LOG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    await message.answer("‚úÖ Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ.")


@dp.message(F.text)
async def handle_message(message: Message):
    print(f"[üëÄ] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.full_name}: {message.text}")
    await message.answer("‚úÖ –ë–æ—Ç –Ω–∞ —Å–≤—è–∑–∏! Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç!")


async def on_startup(app: web.Application):
    try:
        await bot.set_webhook(WEBHOOK_URL)
        logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    except Exception as e:
        if "Too Many Requests" in str(e):
            logging.warning("‚è± –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Webhook. –ñ–¥—ë–º 2 —Å–µ–∫—É–Ω–¥—ã –∏ –ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑...")
            await asyncio.sleep(2)
            await bot.set_webhook(WEBHOOK_URL)
            logging.info(f"‚úÖ Webhook –ø–æ–≤—Ç–æ—Ä–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        else:
            raise


async def on_shutdown(app: web.Application):
    await bot.delete_webhook()
    logging.info("‚ùå Webhook —É–¥–∞–ª—ë–Ω")


async def main(port: int = 8080):
    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)

    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    runner = web.AppRunner(app)
    await runner.setup()

    try:
        site = web.TCPSite(runner, "0.0.0.0", port)
        await site.start()
        print(f"üöÄ Webhook —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ http://localhost:{port}")

        # –û–∂–∏–¥–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ ‚Äî —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è
        await asyncio.Event().wait()

    except OSError as e:
        if e.errno == 10048:
            logging.warning(f"‚ùó –ü–æ—Ä—Ç {port} –∑–∞–Ω—è—Ç. –ü—Ä–æ–±—É–µ–º –ø–æ—Ä—Ç 8080...")
            return await main(port=8080)
        else:
            raise


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    try:
        asyncio.run(main())
    except Exception as e:
        logging.error(f"üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
