from aiogram import Router, F, Bot
from aiogram.types import ChatMemberUpdated, Message, ChatPermissions
from aiogram.filters import ChatMemberUpdatedFilter, Command
from aiogram.enums import ChatMemberStatus, ChatType
from datetime import datetime, timedelta
import asyncio
import logging

router = Router()


# ‚úÖ –í–∞—Ä–∏–∞–Ω—Ç 1: –ú—É—Ç —á–µ—Ä–µ–∑ RESTRICTED —Å—Ç–∞—Ç—É—Å (–∫–æ–≥–¥–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∏–¥—ë—Ç —á–µ—Ä–µ–∑ join_request)
@router.chat_member(
    F.chat.type.in_({"group", "supergroup"}),
    ChatMemberUpdatedFilter(
        member_status_changed=(None, ChatMemberStatus.RESTRICTED)
    )
)
async def mute_unapproved_member(event: ChatMemberUpdated):
    """–ú—É—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–µ –ø—Ä–æ—à–µ–¥—à–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏–µ"""
    try:
        if getattr(event.new_chat_member, 'is_approved', True):
            return

        user = event.new_chat_member.user
        chat = event.chat

        await event.bot.restrict_chat_member(
            chat_id=chat.id,
            user_id=user.id,
            permissions=ChatPermissions(
                can_send_messages=False,
                can_send_media_messages=False,
                can_send_polls=False,
                can_send_other_messages=False,
                can_add_web_page_previews=False,
                can_change_info=False,
                can_invite_users=False,
                can_pin_messages=False
            ),
            until_date=datetime.now() + timedelta(days=366)
        )

        await asyncio.sleep(1)
        await event.bot.send_message(
            chat_id=chat.id,
            text=f"üö´ –°–ø–∞–º–µ—Ä @{user.username} –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º—å—é—á–µ–Ω."
        )

    except Exception as e:
        logging.error(f"MUTE ERROR (variant 1): {str(e)}")


# ‚úÖ –í–∞—Ä–∏–∞–Ω—Ç 2: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ä—É—á–Ω—É—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ chat_member –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è
@router.chat_member(
    F.chat.type.in_({"group", "supergroup"})
)
async def manually_mute_on_approval(event: ChatMemberUpdated):
    """–ú—É—Ç –≤—Ä—É—á–Ω—É—é –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ Telegram –ø—Ä–∏—Å–ª–∞–ª —Å–æ–±—ã—Ç–∏–µ"""
    try:
        old_status = event.old_chat_member.status
        new_status = event.new_chat_member.status

        logging.info(f"[V2] –û–±—Ä–∞–±–æ—Ç–∫–∞ chat_member: {event.from_user.id} | old={old_status} -> new={new_status}")

        if old_status in ("left", "kicked") and new_status == "member":
            user = event.new_chat_member.user
            chat = event.chat

            await event.bot.restrict_chat_member(
                chat_id=chat.id,
                user_id=user.id,
                permissions=ChatPermissions(
                    can_send_messages=False,
                    can_send_media_messages=False,
                    can_send_polls=False,
                    can_send_other_messages=False,
                    can_add_web_page_previews=False,
                    can_change_info=False,
                    can_invite_users=False,
                    can_pin_messages=False
                ),
                until_date=datetime.now() + timedelta(days=366)
            )

            await asyncio.sleep(1)
            logging.info(f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} –±—ã–ª –∑–∞–º—å—é—á–µ–Ω –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è (chat_member).")
        else:
            logging.info(f"[V2] –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: —Å—Ç–∞—Ç—É—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç. old={old_status}, new={new_status}")

    except Exception as e:
        logging.error(f"MUTE ERROR (variant 2 - manual chat_member): {str(e)}")


# ‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤
@router.chat_member(
    F.chat.type.in_({"group", "supergroup"}),
    ChatMemberUpdatedFilter(
        member_status_changed=(ChatMemberStatus.RESTRICTED, ChatMemberStatus.MEMBER)
    )
)
async def recheck_approved_member(event: ChatMemberUpdated):
    """–ü–æ–≤—Ç–æ—Ä–Ω–æ –º—É—Ç–∏–º, –µ—Å–ª–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"""
    await mute_unapproved_member(event)

# —Ç—É—Ç –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∞–Ω—ã.
# from aiogram import Router, F, Bot
# from aiogram.types import ChatMemberUpdated, Message, ChatPermissions
# from aiogram.filters import ChatMemberUpdatedFilter, Command
# from aiogram.enums import ChatMemberStatus, ChatType
# from datetime import datetime, timedelta
# import asyncio
# import logging
#
# router = Router()
# —Ç—É—Ç —è –ø—Ä–æ–ø–∏—Å–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è —á—Ç–æ–±—ã –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –Ω–∞ —É–¥–∞–ª–µ–Ω–∫—É
#
# @router.chat_member(
#     F.chat.type.in_({"group", "supergroup"}),
#     ChatMemberUpdatedFilter(
#         member_status_changed=(None, ChatMemberStatus.RESTRICTED)
#     )
# )
# async def mute_unapproved_member(event: ChatMemberUpdated):
#     """–ú—É—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–µ –ø—Ä–æ—à–µ–¥—à–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏–µ"""
#     try:
#         if getattr(event.new_chat_member, 'is_approved', True):
#             return
#
#         user = event.new_chat_member.user
#         chat = event.chat
#
#         await event.bot.restrict_chat_member(
#             chat_id=chat.id,
#             user_id=user.id,
#             permissions=ChatPermissions(
#                 can_send_messages=False,
#                 can_send_media_messages=False,
#                 can_send_polls=False,
#                 can_send_other_messages=False,
#                 can_add_web_page_previews=False,
#                 can_change_info=False,
#                 can_invite_users=False,
#                 can_pin_messages=False
#             ),
#             until_date=datetime.now() + timedelta(days=366)
#         )
#
#         await asyncio.sleep(1)
#         await event.bot.delete_message(chat.id, event.message_id)
#
#         await event.bot.send_message(
#             chat_id=chat.id,
#             text=f"üö´ –°–ø–∞–º–µ—Ä @{user.username} –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º—å—é—á–µ–Ω."
#         )
#
#     except Exception as e:
#         logging.error(f"MUTE ERROR: {str(e)}")
#
#
# @router.chat_member(
#     F.chat.type.in_({"group", "supergroup"}),
#     ChatMemberUpdatedFilter(
#         member_status_changed=(ChatMemberStatus.RESTRICTED, ChatMemberStatus.MEMBER)
#     )
# )
# async def recheck_approved_member(event: ChatMemberUpdated):
#     """–ü–æ–≤—Ç–æ—Ä–Ω–æ –º—É—Ç–∏–º, –µ—Å–ª–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"""
#     await mute_unapproved_member(event)
#
#
# @router.message(Command("fix_rights"))
# async def fix_rights(message: Message):
#     """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—Ä—É–ø–ø—ã"""
#     chat = message.chat
#     try:
#         bot_member = await message.bot.get_chat_member(chat.id, (await message.bot.me()).id)
#
#         if not bot_member.can_restrict_members:
#             await message.answer("‚ö† –ë–æ—Ç—É –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤ '–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'!")
#             return
#
#         chat_info = await message.bot.get_chat(chat.id)
#         if not getattr(chat_info, 'join_by_request', False):
#             await message.answer("‚ö† –í –≥—Ä—É–ø–ø–µ –Ω–µ –≤–∫–ª—é—á–µ–Ω–æ '–û–¥–æ–±—Ä–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'!")
#
#         await message.answer("‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –∞–Ω—Ç–∏—Å–ø–∞–º–∞!")
#
#     except Exception as e:
#         logging.error(f"Rights check failed: {e}")
#         await message.answer("üî¥ –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤!")
#
#
# @router.message(Command("my_rights"))
# async def check_rights(message: Message, bot: Bot):
#     """–ü–æ–∫–∞–∑ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ"""
#     try:
#         chat = message.chat
#         bot_member = await bot.get_chat_member(chat.id, (await bot.get_me()).id)
#
#         response = (
#             f"‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∞–≤–∞—Ö –±–æ—Ç–∞</b>\n"
#             f"–ß–∞—Ç: {chat.title}\n"
#             f"–¢–∏–ø: {chat.type}\n"
#             f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {bot_member.status}\n"
#             f"–ú–æ–∂–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å: {getattr(bot_member, 'can_restrict_members', False)}\n"
#             f"–û–¥–æ–±—Ä–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {getattr(chat, 'join_by_request', False)}"
#         )
#         await message.answer(response)
#     except Exception as e:
#         logging.error(f"Rights check error: {e}")
#         await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.")
#
#
# @router.message(Command("check"))
# async def check_bot(message: Message):
#     """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
#     await message.answer("–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
#
#
# @router.message(Command("check_mute"))
# async def check_mute(message: Message):
#     """–¢–µ—Å—Ç –º—É—Ç–∞ –Ω–∞ —Å–∞–º–æ–º —Å–µ–±–µ"""
#     test_user_id = message.from_user.id
#     chat_id = message.chat.id
#
#     success = await apply_mute(chat_id, test_user_id, message.bot)
#     if success:
#         await message.answer("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –º—É—Ç –ø—Ä–∏–º–µ–Ω—ë–Ω —É—Å–ø–µ—à–Ω–æ!")
#         await asyncio.sleep(10)
#         await message.bot.restrict_chat_member(
#             chat_id=chat_id,
#             user_id=test_user_id,
#             permissions=ChatPermissions(can_send_messages=True)
#         )
#     else:
#         await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º—É—Ç!")
#
#
# async def apply_mute(chat_id: int, user_id: int, bot: Bot):
#     """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
#     try:
#         bot_member = await bot.get_chat_member(chat_id, (await bot.me()).id)
#         if not (bot_member.is_chat_admin() and bot_member.can_restrict_members):
#             logging.error("–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º—É—Ç–∞!")
#             return False
#
#         await bot.restrict_chat_member(
#             chat_id=chat_id,
#             user_id=user_id,
#             permissions=ChatPermissions(can_send_messages=False),
#             until_date=datetime.now() + timedelta(days=366)
#         )
#         return True
#     except Exception as e:
#         logging.error(f"Mute failed: {str(e)}")
#         return False
